Группа: 10 - И - 1
Электронная почта: volovikov.dvs@gmail.com
Tg: @Pug0077
[ НАЗВАНИЕ ПРОЕКТА ]
Интерактивная диалоговая LLM-платформа с динамическим UI и управлением состоянием


[ ИНТЕРАКТИВНАЯ ДИАЛОГОВАЯ LLM-ПЛАТФОРМА ]

[ ПРОБЛЕМНОЕ ПОЛЕ ]

Создание универсальных пользовательских интерфейсов для взаимодействия с языковыми моделями затруднено из-за отсутствия гибких решений, которые позволяли бы интегрировать LLM в приложения с динамическим UI, управлением состоянием и поддержкой различных интерфейсов.

[ ЗАКАЗЧИК / ПОТЕНЦИАЛЬНАЯ АУДИТОРИЯ ]

Разработчики приложений с интеграцией LLM.
Бизнесы, желающие улучшить взаимодействие с клиентами через чат-ботов.
Образовательные учреждения для создания интерактивных обучающих приложений.
Исследователи в области NLP и HCI (человеко-компьютерного взаимодействия).

[ АППАРАТНЫЕ / ПРОГРАММНЫЕ ТРЕБОВАНИЯ ]

Сервер с поддержкой Python (FastAPI для бэкенда).
Node.js для запуска фронтенда.
Клиентская машина с веб-браузером.
Подключение к интернету для взаимодействия с API LLM (например, OpenAI).

[ ФУНКЦИОНАЛЬНЫЕ ТРЕБОВАНИЯ ]

Возможность добавлять динамические кнопки для выбора пользовательских команд.
Интеграция с различными LLM через API.
Управление состоянием приложения для сохранения контекста.
Генерация интерактивного UI на основе пользовательских запросов.
Подсветка и объяснение терминов из базы знаний.
Запоминание предпочтений пользователя (например, последний выбранный город).
Возможность работы с базой данных для сохранения заметок.
Модульная структура для добавления новых интерфейсов.
Возможность запуска на локальной машине или в облаке.

[ ПОХОЖИЕ / АНАЛОГИЧНЫЕ ПРОДУКТЫ ]

ChatGPT API с интеграцией в кастомные UI.
Rasa (платформа для разработки чат-ботов).
IBM Watson Assistant.
Dialogflow от Google.

[ ИНСТРУМЕНТЫ РАЗРАБОТКИ, ИНФОРМАЦИЯ О БД ]

Фронтенд: React, JavaScript.
Бэкенд: Python (FastAPI).
База данных: SQLite/PostgreSQL для сохранения пользовательских данных.
Интеграция с LLM: OpenAI API или аналоги.
Дополнительно: Docker для развертывания, WebStorm для разработки.

[ ЭТАПЫ РАЗРАБОТКИ ]

Прототипирование интерактивного UI с кнопками.
Разработка бэкенда для взаимодействия с LLM.
Интеграция управления состоянием и базовых API.
Реализация подсветки терминов и базы знаний.
Добавление новых интерфейсов и виджетов.
Настройка модульной системы для расширения функциональности.
Тестирование и отладка.
Развертывание на локальном сервере и в облаке.

[ ВОЗМОЖНЫЕ РИСКИ ]

Ограничения API LLM (например, квоты на запросы).
Задержки при работе с облачными LLM.
Потеря состояния при сбоях системы.
Недостаточная производительность на слабых машинах.
Потенциальные проблемы с безопасностью данных пользователя.
